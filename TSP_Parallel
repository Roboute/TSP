#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <mpi.h>
#include <time.h>

#define MASTER 0


void printArray (int *row, int nElements)
{
   int i;
   for (i=0; i<nElements; i++)
   {
      printf("%d ", row[i]);
   }
   printf("\n");
}

int *createMatrix (int nrows, int ncols)
{
   int *matrix;
   int i;
   int location_num = 0;
   FILE *fp = fopen("points.txt", "rt");
   char line[80];
   int temp_1[100];
   int temp_2[100];
   int temp_3[100];
   int temp_4[100];

   if ((matrix = malloc(nrows*ncols*sizeof(int))) == NULL)
   {
      printf("Malloc error");
      exit(1);
   }

   for (i=0; i<nrows*ncols; i++)
   {
      matrix[i] = -1;
      
      if(i <= 100)
      {
         temp_1[i] = -1;
         temp_2[i] = -1;
         temp_3[i] = -1;
         temp_4[i] = -1;
      }
   }

   while(fgets(line, 80, fp) != NULL)
   {
      sscanf (line, "%d %d", &matrix[location_num], &matrix[location_num+1]);
      location_num+=2;
   }
   close(fp);

   //printf("\nInitial Array:\n");
   //printArray(matrix, location_num);
   
   int split = location_num / 4;
   int j = 2;
   int k = 2;
   int l = 2;
   for (i = 0; i <= location_num; i+=2)
   {
      if(i < split)
      {
         temp_1[i] = matrix[i];
         temp_1[i+1] = matrix[i+1];
      }else if(i == split)
      {
         temp_1[i] = matrix[i];
         temp_1[i+1] = matrix[i+1];
         temp_2[0] = matrix[i];
         temp_2[1] = matrix[i+1];

      }else if(i > split && i < (split*2))
      {
         temp_2[j] = matrix[i];
         temp_2[j+1] = matrix[i+1];
         j+=2;
      }else if(i == (split*2))
      {
         temp_2[j] = matrix[i];
         temp_2[j+1] = matrix[i+1];
         temp_3[0] = matrix[i];
         temp_3[1] = matrix[i+1];
      }else if(i > (split*2) && i < (split*3))
      {
         temp_3[k] = matrix[i];
         temp_3[k+1] = matrix[i+1];
         k+=2;
      }else if(i == (split*3))
      {
         temp_3[j] = matrix[i];
         temp_3[j+1] = matrix[i+1];
         temp_4[0] = matrix[i];
         temp_4[1] = matrix[i+1];
      }else if(i > (split*3) && i < (split*4))
      {
         temp_4[l] = matrix[i];
         temp_4[l+1] = matrix[i+1];
         l+=2;
      }else if(i == (split*4))
      {
         temp_4[l] = matrix[0];
         temp_4[l+1] = matrix[1];
      }
   }

   j = 0;
   k = 0;
   l = 0;
   split = (location_num+8) / 4;
   for (i = 0; i < (location_num+8);i+=2)
   {
       if(i < split)
       {
          matrix[i] = temp_1[i];
          matrix[i+1] = temp_1[i+1];
       }else if(i >= split && i < (split*2))
       {
          matrix[i] = temp_2[j];
          matrix[i+1] = temp_2[j+1];
          j+=2;
       }else if(i >= (split*2) && i < (split*3))
       {
          matrix[i] = temp_3[k];
          matrix[i+1] = temp_3[k+1];
          k+=2;
       }else if(i >= (split*3) && i < (split*4))
       {
          matrix[i] = temp_4[l];
          matrix[i+1] = temp_4[l+1];
          l+=2;
       }
   }
   //printf("\nArray Status after Combining Temp Arrays\n");
   //printArray(matrix, (location_num+8));


   return matrix;
}


int main (int argc, char **argv)
{
   int test = 0;
   int p, id, Loc_num, i, temp_length;
   int *matrix;
   double end_time, start_time, start_time_2;
   clock_t start,start_2, stop;

   if (MPI_Init(&argc, &argv) != MPI_SUCCESS)
   {
      perror("Error initializing MPI");
      exit(1);
   }

   MPI_Comm_size(MPI_COMM_WORLD, &p);
   MPI_Comm_rank(MPI_COMM_WORLD, &id);

   if (id == MASTER)
   {
      start = clock();
      start_time = MPI_Wtime(); 
      temp_length = 0;
      matrix = createMatrix(110, 2); 
      //printf("\nArray Inside To be Worked on:\n");

      for(i = 0; matrix[i] > -1; i++)
      {
         temp_length++;
      }

      //printArray(matrix, temp_length);
      start_2 = clock();
      start_time_2 = MPI_Wtime(); 
   }

   MPI_Bcast(&temp_length, 1, MPI_INT, MASTER, MPI_COMM_WORLD);

   Loc_num = temp_length / 4;

   if(test == 1)
   {
      if (id == MASTER)
      {
         printf("loc num = %d / temp_length = %d\n", Loc_num, temp_length);
      }
   }
   MPI_Barrier(MPI_COMM_WORLD);

   int *procRow = malloc(sizeof(int) * Loc_num);
   if (procRow == NULL)
   {
      perror("Error in malloc 3");
      exit(1);
   }

   if (MPI_Scatter(matrix, Loc_num, MPI_INT, procRow, Loc_num, MPI_INT, 0, MPI_COMM_WORLD) != MPI_SUCCESS)
   {
      perror("Scatter error");
      exit(1);
   }

   //-------------------------------------------------------------------------------
 
   int visited[52] = {0};
   int route[26] = {-1};
   int temp_route[52] ={-1};
   double temp_x, temp_y, distance, Total_distance, Overall_Total;
   int testing = 1;
   int spot, route_rank;
   int current_loc = 0;

   route[0] = 0;
   route_rank = 1;
   visited[0] = 1;
   visited[1] = 1;
   visited[Loc_num-2] = 1;
   visited[Loc_num-1] = 1;
   while(testing == 1)
   {
      double temp_distance = 9999999;
      for (i = 2; i < Loc_num; i+=2)
      {
         if(visited[i] == 0)
         {
            temp_x = (double)procRow[i] - (double)procRow[current_loc];
            temp_y = (double)procRow[i+1] - (double)procRow[current_loc+1];

            distance = sqrt((temp_x*temp_x)+(temp_y*temp_y));

            if(test == 1)
            {  
               if (id == 0)
               {
                  printf("(%d) (test-cur) x(%d - %d) y(%d - %d) Distance = %lf\n",i,procRow[i],procRow[current_loc],procRow[i+1],procRow[current_loc+1],distance);
               }
            }

            if(distance < temp_distance)
            {
               temp_distance = distance;
               spot = i;
            }
         }
      }

      if(temp_distance < 9999999)
      {
         if(test == 1)
         {
            if (id == 0)
            {
              printf("connecting from (%d) to (%d)\n", current_loc, spot);
              printf("current route rank %d\n", route_rank);
            }
         }

         Total_distance += temp_distance;
         visited [spot] = 1;
         visited [spot+1] = 1;
         route[route_rank] = spot;
         current_loc = spot;
         route_rank++;
      }else
      {
          temp_x = (double)procRow[Loc_num-2] - (double)procRow[current_loc];
          temp_y = (double)procRow[Loc_num-1] - (double)procRow[current_loc+1];

          distance = sqrt((temp_x*temp_x)+(temp_y*temp_y));
          Total_distance += distance;

          route[route_rank] = Loc_num-2;

          testing = 0;
         
          if(test == 1)
          {
             if(id == 0)
             {
		printf("(%d) (test-cur) x(%d - %d) y(%d - %d) Distance = %lf\n", Loc_num-2,procRow[Loc_num-2],procRow[current_loc],procRow[Loc_num-1],procRow[current_loc+1],distance);
                printf("connecting from (%d) to (%d)\n", current_loc, Loc_num-2);
                printf("current route rank %d\n", route_rank);
             }
          }

      }
   }
  
   int route_index = 0;
   for(i = 0; i < Loc_num; i+=2)
   {
      temp_route[i] = procRow[route[route_index]];
      temp_route[i+1] = procRow[route[route_index]+1];
      route_index++;
   }
   for (i = 0; i < Loc_num; i++)
   {
       procRow[i] = temp_route[i];
   }

   MPI_Reduce(&Total_distance, &Overall_Total, 1, MPI_DOUBLE, MPI_SUM, MASTER, MPI_COMM_WORLD);
   MPI_Barrier(MPI_COMM_WORLD);
   MPI_Gather(procRow, Loc_num, MPI_INT, matrix, Loc_num, MPI_INT, MASTER, MPI_COMM_WORLD);
 
   if (id == MASTER)
   {
      stop = clock();
      end_time = MPI_Wtime();
      //printf("\nArray After Calculation:\n");
      //printArray(matrix, temp_length);

      printf("\n-----==========-----\n");
      for(i = 0; i < temp_length; i+=2)
      {
         if(i<Loc_num)
         {
            if(i==0)
            {
               printf("\nSection: 1\n");
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }else if(i== (Loc_num-2))
            {
               printf("(%d %d)\n", matrix[i],matrix[i+1]);
            }else
            {
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }
         }else if(i >= Loc_num && i < (Loc_num*2))
         {
            if(i==Loc_num)
            {
               printf("\nSection: 2\n");
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }else if(i== ((Loc_num*2)-2))
            {
               printf("(%d %d)\n", matrix[i],matrix[i+1]);
            }else
            {
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }
         }else if(i >= (Loc_num*2) && i < (Loc_num*3))
         {
            if(i==(Loc_num*2))
            {
               printf("\nSection: 3\n");
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }else if(i== ((Loc_num*3)-2))
            {
               printf("(%d %d)\n", matrix[i],matrix[i+1]);
            }else
            {
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }
         }else
         {
            if(i==(Loc_num*3))
            {
               printf("\nSection: 4\n");
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }else if(i== ((Loc_num*4)-2))
            {
               printf("(%d %d) \n", matrix[i],matrix[i+1]);
            }else
            {
               printf("(%d %d) -> ", matrix[i],matrix[i+1]);
            }
         }
      }

      printf("\nEntire Route:\n");
      int last_x = -1;
      int last_y = -1;
      for (i = 0; i < temp_length; i+=2)
      {
         if(i == (temp_length-2))
         {
            if(last_x == matrix[i] && last_y == matrix[i+1])
            {
            }else
            {
               printf("(%d %d)\n",matrix[i],matrix[i+1]);
            }
         }else
         {
            if(last_x == matrix[i] && last_y == matrix[i+1])
            {
            }else
            {
               printf("(%d %d) -> ",matrix[i],matrix[i+1]);
               last_x = matrix[i];
               last_y = matrix[i+1];
            }        
         }
      }

      printf("\nTotal Distance of the Route (%f)\n",Overall_Total);
      printf("MPI Timer\n");
      printf("Entire Program Time: %f secs\n", end_time - start_time);
      printf("Entire Program Time without Array Setup: %f secs\n", end_time - start_time_2);

      printf("Time.h Timer\n");
      double elapsed = (double)(stop - start) * 1000.0 / CLOCKS_PER_SEC;
      printf("Entire Program Time in ms: %f\n", elapsed);
      elapsed = (double)(stop - start_2) * 1000.0 / CLOCKS_PER_SEC;
      printf("Entire Program Time without Array Setup in ms: %f\n", elapsed);
   }

   MPI_Finalize();
   return 0;
}
